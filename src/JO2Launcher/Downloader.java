/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package JO2Launcher;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.RandomAccessFile;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Abhishek
 */
public class Downloader extends javax.swing.JFrame implements Runnable{
   public static Thread t;
   public static Thread t_check;
   private final int MAX_BUFFER_SIZE ;
   private String threadName;
   String addr;
   String patch_name;
   HttpURLConnection connection;
   String status;
   String site;
   String filename;
    public Downloader(String URL,String p_name) {
        this.MAX_BUFFER_SIZE = 1024;
        this.status = "DOWNLOADING";
        initComponents();
        resume.setEnabled(false);
        pause.setEnabled(true);
        site=URL;
        patch_name=p_name;
        this.filename = patch_name;
        downloadbar.setStringPainted(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLabel1 = new javax.swing.JLabel();
        downloadbar = new javax.swing.JProgressBar();
        dataread = new javax.swing.JLabel();
        totaldata = new javax.swing.JLabel();
        pause = new java.awt.Button();
        resume = new java.awt.Button();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("/");

        dataread.setText("0");

        totaldata.setText("0");

        pause.setActionCommand("Pause");
        pause.setLabel("Pause");
        pause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseActionPerformed(evt);
            }
        });

        resume.setLabel("Resume");
        resume.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resumeActionPerformed(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jo1.png"))); // NOI18N

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(downloadbar, javax.swing.GroupLayout.PREFERRED_SIZE, 776, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(dataread, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(33, 33, 33)
                .addComponent(totaldata, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pause, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resume, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addComponent(jLabel2)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap(365, Short.MAX_VALUE)
                .addComponent(downloadbar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(dataread, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addComponent(totaldata))
                    .addComponent(pause, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resume, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jLayeredPane1.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(downloadbar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(dataread, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(totaldata, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(pause, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(resume, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseActionPerformed
        // TODO add your handling code here:
        status = "PAUSED";
        resume.setEnabled(true);
        pause.setEnabled(false);
    }//GEN-LAST:event_pauseActionPerformed

    private void resumeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resumeActionPerformed
        // TODO add your handling code here:
        status = "DOWNLOADING";
        pause.setEnabled(true);
        resume.setEnabled(false);
    }//GEN-LAST:event_resumeActionPerformed

    /**
     * @param args the command line arguments
     */
        /* Create and display the form */
        @Override
            public void run() {
                //new Downloader().setVisible(true);
                RandomAccessFile fl = null;
                InputStream stream = null;
                int totalDataRead = 0 ,i = 0,Percent = 0,filesize_serv = 0;
       try {
           fl = new RandomAccessFile(System.getProperty("user.dir").replace("\\", "/") + "/temp/" + patch_name,"rw");
       } catch (FileNotFoundException ex) {
           Logger.getLogger(Downloader.class.getName()).log(Level.SEVERE, null, ex);
       }
       try {
		URL url=new URL(site);
                connection = (HttpURLConnection) url.openConnection();
                System.out.println("First conn made");
                totalDataRead=(int) fl.length();
                fl.seek(totalDataRead);
                System.out.println("This is the fl.length = " + (fl.length()-1));
                connection.setRequestProperty("Range"," bytes="+totalDataRead+"-");                   

                System.out.println(connection.getResponseMessage());
                int check = 0;
                if(!connection.getResponseMessage().equals("Requested Range Not Satisfiable"))
                {
                    filesize_serv = connection.getContentLength();
                    filesize_serv += totalDataRead;
                    Percent=((totalDataRead*100)/filesize_serv);
                    totaldata.setText(String.valueOf(filesize_serv/(1024*1024)));
                    downloadbar.setMaximum(filesize_serv);
                            stream = connection.getInputStream();
                            while(check!=-1)
                            {
                                   if(status.equalsIgnoreCase("PAUSED"))
                                   {
                                       continue;
                                   }
                                   byte buffer[];
                                   if(filesize_serv-totalDataRead > MAX_BUFFER_SIZE)
                                   {
                                       buffer = new byte [MAX_BUFFER_SIZE];
                                   }
                                   else
                                   {
                                       buffer = new byte[filesize_serv-totalDataRead];
                                   }
                                   int read = stream.read(buffer);
                                   check=read;
                                   if(read == -1)
                                       break;
                                   fl.write(buffer,0,read);
                                   totalDataRead += read;
                                   dataread.setText(String.valueOf(totalDataRead/(1024*1024)));
                                   downloadbar.setValue(totalDataRead);
                            }
                          //  if(status.equals("PAUSED"))
                           //     System.exit(0);
                }
                        fl.close();
                        if(stream!=null)
			stream.close();
    }  catch (MalformedURLException ex) {
           Logger.getLogger(Downloader.class.getName()).log(Level.SEVERE, null, ex);
       } catch (IOException ex) {
           Logger.getLogger(Downloader.class.getName()).log(Level.SEVERE, null, ex);
       }
            }
               public void start ()
                {
                   System.out.println("Starting " +  "Downloader" );


                      t = new Thread (this, "Downloader");
                      t_check = t;
                      t.start ();

                }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel dataread;
    private javax.swing.JProgressBar downloadbar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLayeredPane jLayeredPane1;
    private java.awt.Button pause;
    private java.awt.Button resume;
    private javax.swing.JLabel totaldata;
    // End of variables declaration//GEN-END:variables
}
